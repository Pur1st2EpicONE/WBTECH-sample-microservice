// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	context "context"
	reflect "reflect"

	configs "github.com/Pur1st2EpicONE/WBTECH-sample-microservice/internal/configs"
	repository "github.com/Pur1st2EpicONE/WBTECH-sample-microservice/internal/repository"
	logger "github.com/Pur1st2EpicONE/WBTECH-sample-microservice/pkg/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumer) Close(logger logger.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", logger)
}

// Close indicates an expected call of Close.
func (mr *MockConsumerMockRecorder) Close(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumer)(nil).Close), logger)
}

// Run mocks base method.
func (m *MockConsumer) Run(ctx context.Context, storage repository.Storage, logger logger.Logger, consumerID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx, storage, logger, consumerID)
}

// Run indicates an expected call of Run.
func (mr *MockConsumerMockRecorder) Run(ctx, storage, logger, consumerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConsumer)(nil).Run), ctx, storage, logger, consumerID)
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProducer)(nil).Close))
}

// Produce mocks base method.
func (m *MockProducer) Produce(message configs.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockProducerMockRecorder) Produce(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducer)(nil).Produce), message)
}
