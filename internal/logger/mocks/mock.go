// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mock_logger is a generated GoMock package.
package mock_logger

import (
	os "os"
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// CloseFile mocks base method.
func (m *MockLogger) CloseFile(file *os.File) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseFile", file)
}

// CloseFile indicates an expected call of CloseFile.
func (mr *MockLoggerMockRecorder) CloseFile(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFile", reflect.TypeOf((*MockLogger)(nil).CloseFile), file)
}

// LogError mocks base method.
func (m *MockLogger) LogError(msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", msg, err)
}

// LogError indicates an expected call of LogError.
func (mr *MockLoggerMockRecorder) LogError(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockLogger)(nil).LogError), msg, err)
}

// LogFatal mocks base method.
func (m *MockLogger) LogFatal(msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogFatal", msg, err)
}

// LogFatal indicates an expected call of LogFatal.
func (mr *MockLoggerMockRecorder) LogFatal(msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFatal", reflect.TypeOf((*MockLogger)(nil).LogFatal), msg, err)
}

// LogInfo mocks base method.
func (m *MockLogger) LogInfo(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogInfo", varargs...)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockLoggerMockRecorder) LogInfo(msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockLogger)(nil).LogInfo), varargs...)
}

// OpenFile mocks base method.
func (m *MockLogger) OpenFile() *os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockLoggerMockRecorder) OpenFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockLogger)(nil).OpenFile))
}

// Run mocks base method.
func (m *MockLogger) Run(wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", wg)
}

// Run indicates an expected call of Run.
func (mr *MockLoggerMockRecorder) Run(wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockLogger)(nil).Run), wg)
}
