// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"

	models "github.com/Pur1st2EpicONE/WBTECH-sample-microservice/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// CacheCleaner mocks base method.
func (m *MockCacher) CacheCleaner(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheCleaner", ctx)
}

// CacheCleaner indicates an expected call of CacheCleaner.
func (mr *MockCacherMockRecorder) CacheCleaner(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheCleaner", reflect.TypeOf((*MockCacher)(nil).CacheCleaner), ctx)
}

// CacheOrder mocks base method.
func (m *MockCacher) CacheOrder(order *models.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheOrder", order)
}

// CacheOrder indicates an expected call of CacheOrder.
func (mr *MockCacherMockRecorder) CacheOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheOrder", reflect.TypeOf((*MockCacher)(nil).CacheOrder), order)
}

// GetCachedOrder mocks base method.
func (m *MockCacher) GetCachedOrder(orderID string) (*models.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedOrder", orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCachedOrder indicates an expected call of GetCachedOrder.
func (mr *MockCacherMockRecorder) GetCachedOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedOrder", reflect.TypeOf((*MockCacher)(nil).GetCachedOrder), orderID)
}
